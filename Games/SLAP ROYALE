-- loadstring stuff

local ARGS = {...}
local WINDOW = ARGS[1]
local NOTIFICATION = ARGS[2]

-- tabs

local MAIN_TAB = WINDOW:MakeTab({
   Name = "MAIN",
   Icon = nil,
   PremiumOnly = false
})
local ITEM_GRABBER = WINDOW:MakeTab({
   Name = "ITEM GRABBER",
   Icon = nil,
   PremiumOnly = false
})

-- locales

local Items = {
 [1] = {
   ["Name"] = "Power",
   "Bull's essence",
   "Sphere of fury",
   "True Power",
   "Cube of Ice"
 },
 [2] = {
  ["Name"] = "Potions",
  "Healing Potion", 
  "Speed Potion",
  "Lightning Potion",
  "Frog Potion",
  "Potion of Strength"
 },
 [3] = {
  ["Name"] = "Healing",
  "Bandage",
  "First Aid Kit", 
  "Apple"
 },
 [4] = {
  ["Name"] = "Misc",
  "Boba",
  "Forcefield Crystal" 
 }
}

local SlapNearest = false
local CollectWitch = false
local NearestPlayer = nil
local NearestText = nil

-- functions

local GetNearestPlayer = function()
   local cam = workspace.CurrentCamera
   local dist = 99999
   local player;
   
   for i,v in pairs(game.Players:GetChildren()) do if v ~= game.Players.LocalPlayer and v.Character then
         if v.Character:FindFirstChild("Torso") and v.Character:FindFirstChild("Humanoid") then
            local newdist = (game.Players.LocalPlayer.Character.Torso.Position - v.Character.Torso.Position).Magnitude
            local humanoid = v.Character:FindFirstChild("Humanoid")
         
            if newdist < dist and humanoid.Health ~= 0 then
               dist = newdist
               player = v
            end
         end
      end 
   end
   
   return player,dist
end

local GetLeg = function()
   local Legs = {"Left Leg", "Right Leg"}
   
   return game:GetService("Players").LocalPlayer.Character[Legs[math.random(1, #Legs)]]
end

local FindItem = function(Name, PreItem)
   if workspace:FindFirstChild(Name) or PreItem ~= nil then
      
      local Item = PreItem or workspace:FindFirstChild(Name)
      
      if (Item:IsA("Tool") and Item:FindFirstChild("Handle")) then
         
         local Handle = Item:FindFirstChild("Handle")
         local TouchP = GetLeg()
         
         firetouchinterest(TouchP, Handle, 0)
         firetouchinterest(TouchP, Handle, 1)   
         
         return true
      end
   end
   
   return false
end

-- sections

local TPS = MAIN_TAB:AddSection({Name = "TELEPORTS"})
local SLP = MAIN_TAB:AddSection({Name = "SLAP AURA"})
local OTH = MAIN_TAB:AddSection({Name = "OTHER"})
local GA = ITEM_GRABBER:AddSection({Name = "EVERYTHING"})
local HA = ITEM_GRABBER:AddSection({Name = "HALLOWEEN"})

-- item grabber section

GA:AddButton({
  Name = "GRAB ALL",
  Callback = function()
 
    if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Countdown") then
        NOTIFICATION("[ERROR]", "WAIT FOR THE GAME TO START!", 5, nil)
           
        return
     end
     for i, v in pairs(Items) do
        for z, x in pairs(v) do
           if z ~= "Name" then
              if workspace:FindFirstChild(x) then
                 for c, b in pairs(workspace:GetChildren()) do
                    if b:IsA("Tool") then
                       FindItem(b.Name, b)
                    end
                 end
              end
           end
        end
     end
  end
})

for i, v in pairs(Items) do
   local Section = ITEM_GRABBER:AddSection({Name = v["Name"]:upper()})
   local FoundSection = false
   
   for z, x in pairs(v) do
      if workspace:FindFirstChild(x) then
         Section:AddButton({
           Name = "GET [" .. x:upper() .. "]",
           Callback = function(...)
              if game:GetService("Players").LocalPlayer.PlayerGui:FindFirstChild("Countdown") then
                 NOTIFICATION("[ERROR]", "WAIT FOR THE GAME TO START!", 5, nil)
           
                 return
              end
              local ItemFound = FindItem(x)
        
              if not ItemFound then
                 NOTIFICATION("[ERROR]", "ITEM WAS NOT FOUND!", 5, nil)
              end
           end
         })
         FoundSection = true
      end
   end
   
   if not FoundSection then
      Section:AddLabel("NO ITEMS IN THIS CATEGORY WERE FOUND!")
   end
end

HA:AddToggle({
  Name = "Witch Brew",
  Default = false,
  Callback = function(Bool)
     CollectWitch = Bool
  end
})

-- main section

TPS:AddButton({
  Name = "QUEUE",
  Callback = function(...)
     game:GetService("TeleportService"):Teleport(9426795465) 
  end
})

TPS:AddButton({
  Name = "PRIVATE",
  Callback = function(...)
     game:GetService("TeleportService"):Teleport(9431156611) 
  end
})

NearestText = SLP:AddLabel("NEAREST: NULL")

local GNP = SLP:AddToggle({
  Name = "SLAP NEAREST",
  Default = false,
  Callback = function(Bool)
     SlapNearest = Bool
  end
})

local GTN = SLP:AddButton({
  Name = "TELEPORT NEAREST",
  Callback = function()
     local Player,Distance = GetNearestPlayer()
     NearestText:set("NEAREST: " .. tostring(Player.Name):upper() .. " (" .. tostring(Distance) .. ")") 
     if Player ~= nil then
        if Player.Character then
           if Player.Character:FindFirstChild("HumanoidRootPart") then
               
              local HumanoidRootPart = Player.Character:FindFirstChild("HumanoidRootPart")
              
              game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = HumanoidRootPart.CFrame
           end
        end
     end
  end
})

OTH:AddButton({
  Name = "Remove Zone",
  Callback = function()
     if workspace:FindFirstChild("Zone1") then
        workspace:FindFirstChild("Zone1"):Destroy()
     end
      if workspace:FindFirstChild("Zone2") then
        workspace:FindFirstChild("Zone2"):Destroy()
     end
  end
})

OTH:AddButton({
  Name = "Exploiter Check",
  Callback = function()
     local ToolCount = 0
     
     for i, v in pairs(workspace:GetChildren()) do
        if v:IsA("Tool") then ToolCount = ToolCount + 1 end
     end
     
     if ToolCount == 0 or ToolCount < 5 then
        NOTIFICATION("[EXPLOITER CHECK]", "A POSSIBLE EXPLOITER IS IN THIS SERVER!", 10, nil)
     else
        NOTIFICATION("[EXPLOITER CHECK]", "NO EXPLOITERS FOUND IN THIS SERVER!", 5, nil)    
     end
  end
})

OTH:AddButton({
  Name = "Witch Check",
  Callback = function()
     local WitchFound = false
     
     for i, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v:FindFirstChild("Glove") then
           if v:FindFirstChild("Glove").Value:lower() == "witch" then
              NOTIFICATION("[WITCH CHECK]", tostring(v.Name):upper() .. " HAS WITCH!", 5, nil)
              WitchFound = true
           end
        end
     end
     
     if not WitchFound then
        NOTIFICATION("[WITCH CHECK]", "NOBODY HAS WITCH!", 15, nil)
     end
  end
})

-- connections

game:GetService("RunService").RenderStepped:Connect(function(...)
    if SlapNearest and not _G.DisabledForUser then
       local Player,Distance = GetNearestPlayer()
       local PlayerParts = {"HumanoidRootPart", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg", "Head"}
       local Part = PlayerParts[math.random(1, #PlayerParts)]
       
       if Player ~= nil then
          if NearestText ~= nil then NearestText:Set("NEAREST: " .. tostring(Player.Name):upper() .. " (" .. tostring(Distance) .. ")") end
          if Distance < 30 then
             game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Slap"):FireServer(Player.Character[Part])
          end
       end
    end
end)

workspace.ChildAdded:Connect(function(Child)
    if Child.Name == "Witch Brew" and CollectWitch then
       local Handle = Child:WaitForChild("Handle")
       
       if workspace:FindFirstChild("Witch Brew") then
          repeat wait()
            if workspace:FindFirstChild("Witch Brew") then
                firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, Handle, 0)
                firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, Handle, 1)
            end
          until not workspace:FindFirstChild("Witch Brew")
          NOTIFICATION("[WITCH BREW]", "COLLECTED!", 10, nil)
       end
    end
end)

-- mod check functions/connections

local Players = game:GetService("Players")
local ModCheck = function(Player)
   local GroupRole = Player:GetRoleInGroup(9950771)
   local ModRoles = {"Junior Staff", "Trial Staff", "Staff", "Senior Staff", "Staff Supervisor", "OVERSEER", "Owner"}
   
   if table.find(ModRoles, GroupRole) then
      NOTIFICATION("[ALERT]", ("MODERATOR FOUND: " .. Player.Name), 5, nil)
   else
      return
   end
end

Players.PlayerAdded:Connect(ModCheck)

for i, v in pairs(Players:GetPlayers()) do
   ModCheck(v)
end
